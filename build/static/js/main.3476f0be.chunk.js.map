{"version":3,"sources":["logo.svg","Components/Counter.js","App.js","reportWebVitals.js","index.js"],"names":["Counter","useState","value","setvalue","maxValue","setmaxValue","handleChange","e","target","parseInt","console","log","className","id","onClick","alert","type","onChange","prevalue","htmlFor","placeholder","name","handleMax","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2KAAe,I,mBCgGAA,MA9Ff,WAEI,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,KAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA8BJ,oBAAS,GAAvC,mBACA,GADA,UAC0BA,oBAAS,IAAnC,mBA4BMK,GA5BN,UA4BqB,SAACC,GACdA,EAAEC,OAAON,OACbC,EAASM,SAASF,EAAEC,OAAON,QAC3BQ,QAAQC,WAAWT,EAAOA,IAGtBC,EAAS,MAmCjB,OACI,sBAAKS,UAAU,UAAf,UACA,sBAAKC,GAAG,UAAR,UACA,qBAAKA,GAAG,oBAAoBC,QAAS,WAAO,OArExCZ,EAAM,GAAG,EACTC,EAASD,EAAM,GAGfa,MAAM,yBAEVL,QAAQC,IAAI,YAAYT,IA+DxB,SAAqE,uCACrE,qBAAKW,GAAG,mBAAR,SAA2B,uBAAOA,GAAG,gBAAgBG,KAAK,OAAOd,MAAOA,EAAOe,SAAU,SAACV,GAAO,OAAOD,EAAaC,QACrH,qBAAKM,GAAG,oBAAoBC,QA9DV,WACP,IAAPZ,EACAC,EAAS,IAGTD,EAAM,GAAGE,EAETD,GAAS,SAAAe,GAAQ,OAAIA,EAAS,KAG9BH,MAAM,oBAEVL,QAAQC,IAAI,YAAYT,EAAME,KAkD9B,SAAoD,0CAGtD,gCACE,uBAAOe,QAAQ,eAAf,kCACA,uBAAON,GAAG,eAAeG,KAAK,OAAOI,YAAY,uBAAuBC,KAAK,eAAeJ,SAAU,SAACV,GAAO,OAAOD,EAAaC,MAClI,uBACA,uBAAOY,QAAQ,WAAf,mCACA,uBAAON,GAAG,WAAWG,KAAK,OAAOI,YAAY,kBAAkBC,KAAK,WAAWJ,SAAU,SAACV,GAAO,OAjCnF,SAACA,GAgBfF,EAAYI,SAASF,EAAEC,OAAON,QAC9BQ,QAAQC,IAAIP,EAASF,GAgBmFoB,CAAUf,aC1E3GgB,MAVf,WAGE,OACE,qBAAKX,UAAU,MAAf,SACE,cAAC,EAAD,OCESY,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.3476f0be.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React,{  useState,useEffect} from \"react\";\r\n\r\nfunction Counter(){\r\n\r\n    const [value, setvalue] = useState(1)\r\n    const [maxValue, setmaxValue] = useState(1000)\r\n    const [initial, setinitial] = useState(false)\r\n    const [ismax, setismax] = useState(false)\r\n    \r\n    const DecreaseCount = () => {\r\n        if (value-1>=1){\r\n            setvalue(value-1)\r\n        }\r\n        else{\r\n            alert('minLimit Reached')\r\n        }\r\n        console.log('decrement',value)\r\n    }\r\n\r\n    const IncreaseCount = () => {\r\n        if (value==''){\r\n            setvalue(1)\r\n        }\r\n        else{\r\n        if (value+1<=maxValue){\r\n\r\n            setvalue(prevalue => prevalue+1)\r\n        }\r\n        else{\r\n            alert('maxLimit Reached')\r\n        }\r\n        console.log('increment',value,maxValue)\r\n    }\r\n    }\r\n\r\n    const handleChange = (e) => {\r\n        if (e.target.value){\r\n        setvalue(parseInt(e.target.value))\r\n        console.log(typeof(value),value)\r\n        }\r\n        else{\r\n            setvalue('')\r\n        }\r\n    }\r\n    \r\n    const handleInitial = (e) => {\r\n        if(e.target.value){\r\n        setvalue(parseInt(e.target.value))\r\n        setinitial(true)\r\n        console.log(maxValue,value)\r\n        }\r\n        else{\r\n            e.target.value=1\r\n            setvalue(1)\r\n        }\r\n    }\r\n    const handleMax = (e) => {\r\n        //     if (parseInt(e.target.value) > value){\r\n        // setmaxValue(parseInt(e.target.value))\r\n        //     }\r\n        //     else{\r\n        //         alert('val less than initial')\r\n        //         e.target.value =''\r\n        //     }\r\n        \r\n        // if (e.target.value =''){\r\n        //     setmaxValue(1000)\r\n        // }\r\n        // else{\r\n        // setvalue(1000)\r\n        // setmaxValue(parseInt(e.target.value))\r\n        // }\r\n        setmaxValue(parseInt(e.target.value))\r\n        console.log(maxValue,value)\r\n    }\r\n\r\n    return(\r\n        <div className='mainDiv'>\r\n        <div id='counter'>\r\n        <div id='counter-decrement' onClick={() => {return DecreaseCount()}}><span>-</span></div>\r\n        <div id='counter-text-div'><input id='counter-input' type=\"text\" value={value} onChange={(e) => {return handleChange(e)}} /></div>\r\n        <div id='counter-increment' onClick={IncreaseCount}><span>+</span></div>\r\n      </div>\r\n      \r\n      <div>\r\n        <label htmlFor=\"initailValue\">Initial Value : &nbsp;</label>\r\n        <input id='initialValue' type=\"text\" placeholder='enter initial  value' name='initialValue' onChange={(e) => {return handleChange(e)}}/>\r\n        <br />\r\n        <label htmlFor=\"maxValue\">Max Value &nbsp; : &nbsp;</label>\r\n        <input id='maxValue' type=\"text\" placeholder='enter max value' name='maxValue' onChange={(e) => {return handleMax(e)}}/>\r\n        \r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Counter;","import logo from './logo.svg';\nimport './App.css';\n\nimport Counter from './Components/Counter'\n\nfunction App() {\n\n\n  return (\n    <div className=\"App\">\n      <Counter/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}